{"version":3,"sources":["images/tweeter.gif","images/mapbook.png","images/pathfinder.png","images/tweeter.png","Navbar.js","headers/Tweeter.js","headers/Mapbook.js","headers/Pathfinder.js","Portfolio.js","About.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","updatePage","className","onClick","e","Tweeter","src","tweeter","class","Mapbook","Pathfinder","Portfolio","portfolio","resetHeader","updateportfolio","style","fontSize","backgroundImage","require","About","Body","page","useState","setPortfolio","portfolioInput","App","setPage","pageInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.314a1819.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tweeter.c911ff09.gif\";","module.exports = __webpack_public_path__ + \"static/media/mapbook.2dd77f17.png\";","module.exports = __webpack_public_path__ + \"static/media/pathfinder.3519ca3f.png\";","module.exports = __webpack_public_path__ + \"static/media/tweeter.9358a659.png\";","import React from \"react\";\nimport \"./styles/Navbar.scss\";\n\nexport default function Navbar(props) {\n\n  const { updatePage } = props\n\n  return (\n    <div className=\"Navbar\">\n      <span className=\"name\">Andrew Trac</span>\n      <div className=\"links\">\n        <span className=\"link\" onClick={e => updatePage(\"About\")}>About Me</span>\n        <span className=\"link\" onClick={e => updatePage(\"Portfolio\")}>Portfolio</span>\n        <span>CV</span>\n        <span>Contact</span>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\nimport tweeter from '../images/tweeter.gif'\n\nexport default function Tweeter(props) {\n\n  const { onClick } = props\n\n  return (\n    <div className=\"Header__tweeter\" onClick={onClick}>\n        <img src={tweeter} className=\"Header__demo\"></img>\n      <div class=\"Header__info\">\n        <h1>Tweeter</h1>\n        <p>Project info</p>\n\n      </div>\n    </div>\n\n  )\n\n\n}","import React from 'react'\n\nexport default function Mapbook(props) {\n\n  const { onClick } = props\n\n  return (\n    <div className=\"Header__mapbook\" onClick={onClick}>\n      <span>Mapbook</span>\n    </div>\n\n  )\n\n\n}","import React from 'react'\n\nexport default function Pathfinder(props) {\n\n  const { onClick } = props\n\n  return (\n    <div className=\"Header__mapbook\" onClick={onClick}>\n    </div>\n  )\n\n\n}","import React from \"react\";\nimport Tweeter from './headers/Tweeter'\nimport Mapbook from './headers/Mapbook'\nimport Pathfinder from \"./headers/Pathfinder\";\n\nexport default function Portfolio (props) {\n\n  const { portfolio, resetHeader, updateportfolio } = props\n\nreturn (\n<div>\n{portfolio === \"tweeter\" && <Tweeter onClick={resetHeader} />}\n{portfolio === \"mapbook\" && <Mapbook onClick={resetHeader} />}\n{portfolio === \"pathfinder\" && <Pathfinder onClick={resetHeader} />}\n\n{portfolio === \"\" &&  <div className=\"Header\">\n  <span style={{fontSize: \"60px\"}}>Portfolio</span>\n  <br></br>\n  <span style={{fontSize: \"25px\"}}>Hover and click on tiles below</span>\n</div>}\n\n<div className=\"Portfolio\">\n  <div className=\"Portfolio__block\" style={{backgroundImage: `url(${require(\"./images/mapbook.png\")})` }} onClick={e => updateportfolio(\"mapbook\")}></div>\n  <div className=\"Portfolio__block\" style={{backgroundImage: `url(${require(\"./images/pathfinder.png\")})` }} onClick={e => updateportfolio(\"pathfinder\")}></div>\n  <div className=\"Portfolio__block\" style={{backgroundImage: `url(${require(\"./images/tweeter.png\")})` }} onClick={e => updateportfolio(\"tweeter\")}></div>\n  <div className=\"Portfolio__block\"></div>\n</div>\n</div>\n)\n\n}","import React from 'react'\n\n\nexport default function About () {\n\n  \n\n\n  return (\n    <div className='About'>\n\n      <p>Hello World</p>\n\n    </div>\n  )\n\n\n}","import React, { useState } from \"react\";\nimport Portfolio from './Portfolio'\nimport About from './About'\nimport \"./styles/Header.scss\";\nimport \"./styles/Body.scss\";\nimport \"./styles/Portfolio.scss\"\n\nexport default function Body(props) {\n\nconst { page } = props;\n\nconst [portfolio, setPortfolio] = useState(\"\")\nconst resetHeader = () => {\n  setPortfolio(\"\")\n}\n\nconst updateportfolio = (portfolioInput) => {\n  setPortfolio(portfolioInput)\n}\n\n  return (\n    <div className=\"Body\">\n      { page === \"Portfolio\" && <Portfolio resetHeader={resetHeader} portfolio={portfolio} updateportfolio={updateportfolio} /> }\n      { page === \"About\" && <About /> }\n    </div> \n  );\n}\n","import React, { useState } from 'react';\nimport Navbar from './Navbar'\nimport Body from './Body'\nimport './styles/App.scss';\n\nfunction App() {\n  const [page, setPage] = useState(\"Portfolio\")\n\n  const updatePage = (pageInput) => {\n    setPage(pageInput)\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar updatePage={updatePage}/>\n      <Body  page={page}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}